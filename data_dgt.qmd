---
title: "Datos DGT"
editor: visual
editor_options: 
  chunk_output_type: console
---

## Preliminares

### Librerías

Manipulación de datos:

```{r}
#| messages: false
#| warning: false

library(dplyr)
```

Manipulación de cadenas:

```{r}
library(stringr)
library(glue)
```

Programación funcional (`map` y similares):

```{r}
library(purrr)
```

Lectura de hojas de cálculo:

```{r}
library(readr)
library(readxl)
```

Tablas:

```{r}
library(tinytable)
library(modelsummary)
```

### Variables globales y funciones comunes

Define los directorios de datos:

```{r}
data_dir <- "data"
raw_data_dir <- file.path(data_dir, "orig")
```

Funciones para construir la ruta a los ficheros de datos:

```{r}
data_file <- function(fname) 
  file.path(data_dir, fname)

raw_data_file <- function(fname) 
  file.path(raw_data_dir, fname)
```

Aunque algunas fuentes ofrecen datos para más años, sólo se dispone de información completa para el periodo 2021--2023:

```{r}
years <- 2021:2023
```

Función para guardar los datos una vez procesados:

```{r}
save_data <- function(x, fname) 
  saveRDS(x, file = data_file(fname), compress = "xz")
```

## Lectura de los datos

Desde 2021 la [DGT](https://www.dgt.es) proporciona ficheros Excel con información municipal, incluyendo el número de vehículos por distintivo ambiental. Se puede acceder a esta información a través del portal [DGT en cifras](https://www.dgt.es/menusecundario/dgt-en-cifras/).

### Ficheros de Excel

Tabla con los nombres de los ficheros:

```{r}
dgt_files <- local({
  glue_str <- "DatosMunicipalesGeneral_{years}.xlsx"
  tibble(file = glue(glue_str), year = years)
})
```

```{r}
#| echo: false

tt(dgt_files)
```

### Diccionario de variables

El archivo `"dgt_mun_dict.csv"` contiene información acerca de las variables contenidas en los ficheros de la DGT:

-   `column`: Número de columna de la hoja de cálculo.
-   `label`: Nombre de la columna en la hoja de cálculo.
-   `name`: Nombre de la variable.
-   `type`: Tipo de variable (`c` para texto, `i` para enteros y `d` para reales).

Se ignoran las columnas con valores ausentes en `name`.

```{r}
dgt_dict <-
  read_csv(data_file("dgt_mun_dict.csv"), col_types = "icc") |>
  mutate(excel_col_types = #<1>
           case_when(is.na(name) ~ "skip",
                     type == "c" ~ "text",
                     .default = "numeric"))
```

1.  Se añade `excel_col_types` a la tabla, que se usará más tarde como argumento de `read_xlsx` para especificar el tipo de columna de la hoja de cálculo.

```{r}
#| echo: false

## TODO: the following condition should be ginven inside style_tt
idx <- which(is.na(dgt_dict$name))
tt(dgt_dict) |> 
  style_tt(i = idx, color = "gray70")
```

### Lectura de datos

La función `read_dgt_file` lee los datos de un año:

```{r}
# Lee datos de un año
read_dgt_file <- function(input_file, year, dict) {
  if (year == 2021) { #<1>
    dict <- dict |> filter(column != 57)
  }
  
  read_xlsx(input_file, skip = 1,
            col_types = dict$excel_col_types,
            col_names = dict$name) |>
    filter(!str_detect(mun, fixed("sin especificar"))) |> #<2>
    mutate(year = year) #<3>
}
```

1.  En el año 2021 hay una variable menos.
2.  Se ignoran las filas que recogen cifras no asociadas a un municipio en concreto.
3.  Se añade la variable `year` para identificar a qué año corresponden los datos.

Lee los datos de cada año y los combina en un único conjunto de datos:

```{r}

db <- 
  pmap(dgt_files,
       \(file, year) 
         read_dgt_file(raw_data_file(file), year, dgt_dict)) |>
  bind_rows()
```

### Escritura de datos

Guarda los datos en formato rds en el fichero `dgt_mun_data.rds`:

```{r}
save_data(db, "dgt_mun_data.rds")
```

Variables de texto:

-   `ine_code`: código del municipio, como lo define el INE.

-   `mun`: nombre del municipio.

-   `prov`: nombre de la provincia.

-   `reg`: nombre de la comunidad autónoma.

Estadísticos descriptivos de las variables numéricas:

```{r}
#| echo: false

datasummary_skim(db, 
                 fun_numeric = 
                   list(Mean = Mean, SD = SD, 
                        Min = Min, Median = Median, Max = Max, 
                        `Missing Pct.` = PercentMissing),
                 type = "numeric") |> 
  tt_style(j = 2:7, align = "r")
```
